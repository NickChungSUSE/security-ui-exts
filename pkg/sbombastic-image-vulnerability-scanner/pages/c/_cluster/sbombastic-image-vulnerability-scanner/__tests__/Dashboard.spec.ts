import { mount } from '@vue/test-utils';
import { createStore } from 'vuex';
import Dashboard from '../Dashboard.vue';

// Define RESOURCE constants locally to avoid import issues
const RESOURCE = {
  REGISTRY: "sbombastic.rancher.io.registry",
  SCAN_JOB: "sbombastic.rancher.io.scanjob"
};

describe('Dashboard', () => {
  let store: any;
  let wrapper: any;

  beforeEach(() => {
    store = createStore({
      modules: {
        cluster: {
          namespaced: true,
          getters: {
            'all': () => (type: string) => {
              if (type === RESOURCE.REGISTRY) return [];
              if (type === RESOURCE.SCAN_JOB) return [];
              return [];
            }
          },
          actions: {
            'findAll': jest.fn()
          }
        }
      }
    });

    wrapper = mount(Dashboard, {
      global: {
        plugins: [store],
        mocks: {
          $route: {
            params: { cluster: 'test-cluster' }
          },
          $router: {
            push: jest.fn()
          },
          $t: (key: string) => key,
          $store: store
        },
        stubs: {
          RouterLink: {
            template: '<a><slot /></a>',
            props: ['to']
          },
          LabeledSelect: {
            template: '<select class="labeled-select"><option v-for="option in options" :key="option.value" :value="option.value">{{ option.label }}</option></select>',
            props: ['value', 'options', 'closeOnSelect', 'multiple']
          },
          SevereVulnerabilitiesItem: {
            template: '<div class="severe-vulnerabilities-item"><slot /></div>',
            props: ['vulnerability']
          },
          TopSevereVulnerabilitiesChart: {
            template: '<div class="top-severe-vulnerabilities-chart"></div>',
            props: ['topSevereVulnerabilities']
          },
          ImageRiskAssessment: {
            template: '<div class="image-risk-assessment"></div>',
            props: ['vulnerabilityStats', 'scanningStats', 'chartData']
          },
          TopRiskyImagesChart: {
            template: '<div class="top-risky-images-chart"></div>',
            props: ['topRiskyImages']
          }
        }
      }
    });
  });

  afterEach(() => {
    wrapper.unmount();
  });

  describe('Component Initialization', () => {
    it('should render the component', () => {
      expect(wrapper.exists()).toBe(true);
    });

    it('should display the correct title', () => {
      expect(wrapper.find('.title').text()).toContain('imageScanner.dashboard.title');
    });

    it('should display the download report button', () => {
      const downloadButton = wrapper.find('.btn.role-primary');
      expect(downloadButton.exists()).toBe(true);
      expect(downloadButton.text()).toContain('imageScanner.images.downloadReport');
    });

    it('should display the registry filter dropdown', () => {
      const labeledSelect = wrapper.find('.labeled-select');
      expect(labeledSelect.exists()).toBe(true);
    });
  });

  describe('Component Structure', () => {
    it('should render ImageRiskAssessment component', () => {
      const imageRiskAssessment = wrapper.find('.image-risk-assessment');
      expect(imageRiskAssessment.exists()).toBe(true);
    });

    it('should render TopSevereVulnerabilitiesChart component', () => {
      const topSevereVulnerabilitiesChart = wrapper.find('.top-severe-vulnerabilities-chart');
      expect(topSevereVulnerabilitiesChart.exists()).toBe(true);
    });

    it('should render TopRiskyImagesChart component', () => {
      const topRiskyImagesChart = wrapper.find('.top-risky-images-chart');
      expect(topRiskyImagesChart.exists()).toBe(true);
    });
  });

  describe('Actions', () => {
    it('should handle download report action', () => {
      const consoleSpy = jest.spyOn(console, 'log').mockImplementation();
      wrapper.vm.openAddEditRuleModal();
      expect(consoleSpy).toHaveBeenCalledWith('Download full report');
      consoleSpy.mockRestore();
    });

    it('should handle refresh action', async () => {
      const loadDashboardDataSpy = jest.spyOn(wrapper.vm, 'loadDashboardData');
      await wrapper.vm.refresh();
      expect(wrapper.vm.disabled).toBe(false);
      expect(loadDashboardDataSpy).toHaveBeenCalled();
      loadDashboardDataSpy.mockRestore();
    });
  });

  describe('Component Data', () => {
    it('should have correct initial data properties', () => {
      expect(wrapper.vm.PRODUCT_NAME).toBeDefined();
      expect(wrapper.vm.disabled).toBe(false);
      expect(wrapper.vm.selectedRegistry).toBe('all');
      expect(wrapper.vm.registryOptions).toBeDefined();
      expect(wrapper.vm.vulnerabilityStats).toBeDefined();
      expect(wrapper.vm.scanningStats).toBeDefined();
    });
  });
});